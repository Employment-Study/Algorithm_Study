//package Quiz04;
//
//// 구슬을 나누는 경우의 수
//// 수, 목
//
////class Solution {
////	private int answer, balls, share;
////	
////	public int solution(int balls, int share) {
////		answer = 0; 
////		this.balls = balls;
////		this.share = share;
////		
////		for(int i = 0; i < balls; i++) {
////			combination(i,1); 
////		}
////		return answer;
////	}
//	// 5개 중에서 3개를 고르는 경우의 수라고 가정해보자
//	// 이때 5개중에서 골라야 하기 때문에 반복의 범위는 balls변수이다
//	// 그리고 고르는 share는 3개를 고르는데 5개 중에 어떤 것을 고를지 모르기때문에
//	// 가지는 개수는 3개지만 balls범위 자체를 여러번 반복해서 5개중 내가 3개를
//	// 고를 모든 경우가 몇번인지를 나타내면 된다
//	
//	// 먼저 재귀함수로 구현을 하였고
//	// solution함수에서 balls만큼 i를 반복하는데 한번 반복할때마다
//	// 재귀함수를 실행하게 된다
//	// 이렇게 하는 이유는 3개를 고르는 것이지만 그 3개가 5개 중에 어떤 것일지 모르기 떄문에
//	// i가 한번 반복할떄 1번의경우라고 가정한 후 재귀를 통해 5번 반복하는 사이에
//	// 내가 고른 수와 일치하면 answer를 증가하여 5개 중 3개를 고르는 경우,
//	// 즉, 5/1(5분의1)의 확률을 answer에 담는다
//	
//	private void combination(int curIdx, int curCount) {
//		// i의 반복수와 상대가 고르려는 수가 일치하면
//		if(curCount ==  share) {		
//			answer++;	// 경우의 수 증가
//			return;
//		}
//		// 1. 일치하지 않을 경우 반복문을 돌인다
//		// 2. 반복의 범위는 balls로 내가 가지고 있는 구슬의 수
//		// 3. i는 재귀에 영향을 받지만 맨 위에 함수에 반영되어 그 값으로 일치여부를 판단한다
//		// 4. 하지만 for문의 i에는 curIdx에만 영향을 주어 
//		//    i가 0부터가 아닌 1부터 개수를 시작하게하여 balls까지 반복하게 한다
//		// 5. 재귀가 실행되면 또 다른 함수의 자리를 가지게 된다고 표현해보자면
//		//    새로 생긴함수의 i가 영향을 받아 curCount와 share의 경우의 수를 찾고
//		// 6. if 조건이 true여서 실행이 되면 재귀 함수는 모두 사라지고
//		// 7. 원래 i의 값으로 돌아간다(여기서 원래 i의 값이란 재귀가 진행되기 전의 i를 말한다)
//		// 8. 이렇게 진행이 되어야 5번 안에서 3개를 찾는 경우의 수를 구할 수 있다
//		// 9. 5라는 범위에서 3개를 가진다고 했을때 그게 1번일지,2번일지,3번일지 등등 모르기 때문에
//		// 10.5번의 반복이지만 그 안에서 재귀로 5번에서 1번 1번을 모두 5번의 반복을 돌려주어 경우의 수를 구하는 것
//		// 그러므로 재귀로 진입하게 될 경우에는 처음 for문의 i가 증가하는 것이 아닌 for문의 i번째 마다 재귀로 5번의 경우를 상대수와 비교한다
//		// i의 1번째를 1~5까지 반복하여 1번, i의 2번째를 1~5까지 반복하여 2번 으로 총 i가 5번이 될때까지 반복한다
//		// 재귀는 처음 반복했던 값을 기준으로 나 자신을 호출하여 for문을 실행하고 범위까지 모두 반복했다면 다시 돌아가는 것이다
//		// 그러므로 재귀가 한번 끝난 후에 처음 기준이었던 i가 1에서 2로 증가하고 그 기준에서 다시 재귀가 시작되어 2번째의 5번의 경우를 체크하는것이다
//		// 이 반복이 끝나면 마찬가지로 다시 돌아가서 i는 2번째에서 3번째로 증가하여 다시 검사하고 다시 돌아오고를 반복하며 5개의 구슬이지만
//		// 그 중에서 3개가 어떤 구슬이 될지 모르기 때문에 5번의 경우를 모두 판별해야 한다
//		// 그리고 판별이 끝나면 solution함수로 돌아가고 다시 for문이 시작되는데 이때는 solution의 함수의 for문의 i가 2로 되어
//		// 재귀 for문은 2부터 반복을 시작한다
//		for(int i = curIdx + 1; i < balls; i++) {
//			combination(i, curCount +1 );
//		}
//	}
//}
//
//public class Solution2 {
///*
// 머쓱이는 구슬을 친구들에게 나누어주려고 합니다.
// 구슬은 모두 다르게 생겼습니다.
// 머쓱이가 갖고 있는 구슬의 개수 balls와 친구들에게 나누어 줄
// 구슬 개수 share이 매개변수로 주어질 때, balls개의 구슬 중 share개의 구슬을
// 고르는 가능한 모든 경우의 수를 return 하는 solution 함수를 완성해주세요.
// */
//	
//	public static void main(String[] args) {
//		
//		Solution so = new Solution();
//		
//		int num = so.solution(3, 2);
//		System.out.println(num);
//		
//	}
//}
